import { promises as fs } from 'fs'
import path from 'path'

const ICONS_DIR = path.join(process.cwd(), 'src', 'assets', 'icons')
const GEN_FILE = path.join(process.cwd(), 'src', 'generated', 'icons.ts')

async function ensureDir(dir) { await fs.mkdir(dir, { recursive: true }) }

function toExportName(file) {
  const base = file.replace(/\.svg$/, '')
  return base
    .split(/[^a-zA-Z0-9]+/)
    .filter(Boolean)
    .map((p) => p[0].toUpperCase() + p.slice(1))
    .join('')
}

async function main() {
  await ensureDir(ICONS_DIR)
  await ensureDir(path.dirname(GEN_FILE))
  let files
  try { files = await fs.readdir(ICONS_DIR) } catch { files = [] }
  const svgs = files.filter((f) => f.endsWith('.svg'))
  
  const lines = [
    '// Auto-generated icons registry',
    '// This file is automatically generated from SVG files in src/assets/icons/',
    ''
  ]
  
  if (svgs.length > 0) {
    for (const f of svgs) {
      const name = toExportName(f)
      const rel = path.posix.join('..', 'assets', 'icons', f)
      lines.push(`export { default as ${name} } from '${rel}'`)
    }
  } else {
    lines.push('// No icons found - add SVG files to src/assets/icons/ to generate exports')
    lines.push('export const Icons = {}')
    lines.push('export default Icons')
  }
  
  lines.push('')
  await fs.writeFile(GEN_FILE, lines.join('\n'), 'utf-8')
  console.log(`âœ“ Icons built: ${svgs.length} -> ${GEN_FILE}`)
}

main().catch((e) => { console.error(e); process.exit(1) })

